# -*- coding: utf-8 -*-
"""python classification_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Xa4izHEv74xKD0un5dLr4J1WV32f1FY
"""

!pip install pandas numpy scikit-learn matplotlib shap lime

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
import shap

# Load the dataset (update path if needed)
df = pd.read_csv("/content/bank-additional-full.csv", sep=";")

# Show first few rows
df.head()

# Convert target variable 'y' (yes = 1, no = 0)
df['y'] = df['y'].map({'yes': 1, 'no': 0})

# Drop 'duration' column (as per dataset recommendation)
df = df.drop(columns=['duration'])

# Convert categorical variables to numeric (One-Hot Encoding)
df = pd.get_dummies(df, drop_first=True)

# Split into features (X) and target (y)
X = df.drop(columns=['y'])
y = df['y']

# Split into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale numerical features for better performance
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)

# Check accuracy
train_score = rf_model.score(X_train_scaled, y_train)
test_score = rf_model.score(X_test_scaled, y_test)

print(f"Training Accuracy: {train_score:.2f}")
print(f"Test Accuracy: {test_score:.2f}")

# Get feature importance
feature_importance = rf_model.feature_importances_
feature_names = X.columns

# Sort feature importance
sorted_idx = np.argsort(feature_importance)[::-1]

# Plot feature importance
plt.figure(figsize=(10, 6))
plt.barh(range(10), feature_importance[sorted_idx][:10], align='center')
plt.yticks(range(10), [feature_names[i] for i in sorted_idx[:10]])
plt.xlabel("Feature Importance")
plt.title("Top 10 Important Features")
plt.gca().invert_yaxis()
plt.show()

# Initialize SHAP explainer
explainer = shap.TreeExplainer(rf_model)
shap_values = explainer.shap_values(X_test_scaled)

# Select observation #4 and #20
obs_4 = X_test_scaled[3]
obs_20 = X_test_scaled[19]

# Explain prediction for observation #4
shap.initjs()
shap.force_plot(explainer.expected_value[1], shap_values[1][3], feature_names)

# Explain prediction for observation #20
shap.force_plot(explainer.expected_value[1], shap_values[1][19], feature_names)

shap.summary_plot(shap_values[1], X_test, feature_names=feature_names)